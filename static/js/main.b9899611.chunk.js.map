{"version":3,"sources":["styles/colors.js","components/ColorBox.jsx","components/FormTask.jsx","styles/KeyFrames.js","components/Task.jsx","App.jsx","index.js"],"names":["allColors","mainColor","colors","LabelColor","styled","label","color","InputRadio","input","ColorBox","handleChangeColor","isChecked","type","name","id","onChange","defaultChecked","htmlFor","Input","Button","button","ColorsContainer","div","FormTask","forwardRef","ref","handleSubmit","colorSelected","onSubmit","map","key","keyFrameTask","keyframes","TaskContainer","TaskButton","TaskText","p","done","Task","title","handleCompleteTask","handleDeleteTask","onClick","GlobalStyle","createGlobalStyle","App","useState","setColorSelected","tasks","setTasks","inputTitle","useRef","currentTasks","task","find","getTask","index","indexOf","useEffect","current","focus","ev","preventDefault","target","value","trim","newTask","createNewTask","length","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9899611.chunk.js","sourcesContent":["const allColors = {\n  mainColor: \"#387EF5\",\n  colors: [\"#5D576B\", \"#33C4FF\", \"#FF3333\", \"#DA33FF\"],\n};\n\nexport default allColors;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst LabelColor = styled.label`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  margin-top: 1rem;\n  background-color: ${({ color }) => color};\n  border-radius: 5px;\n  cursor: pointer;\n`;\n\nconst InputRadio = styled.input`\n  display: none;\n  &:checked + label {\n    border: 1px solid #fff;\n  }\n`;\n\nconst ColorBox = ({ color, handleChangeColor, isChecked }) => (\n  <>\n    <InputRadio\n      type=\"radio\"\n      name=\"color\"\n      id={color}\n      onChange={() => handleChangeColor(color)}\n      defaultChecked={isChecked}\n    />\n    <LabelColor htmlFor={color} color={color} />\n  </>\n);\n\nexport default ColorBox;\n","import React, { forwardRef } from \"react\";\nimport styled from \"styled-components\";\nimport allColors from \"../styles/colors\";\nimport ColorBox from \"./ColorBox\";\nimport { generate as id } from \"shortid\";\n\nconst Input = styled.input`\n  width: 20rem;\n  border: none;\n  border-bottom: 1px solid ${allColors.mainColor};\n  background: none;\n  outline: none;\n  color: ${allColors.mainColor};\n`;\n\nconst Button = styled.button`\n  background-color: transparent;\n  border: 1px solid ${allColors.mainColor};\n  color: ${allColors.mainColor};\n  outline: none;\n  border-radius: 5px;\n  padding: 0.5rem 0.5rem;\n  cursor: pointer;\n  margin: 0.5rem 0;\n\n  &:hover {\n    background-color: ${allColors.mainColor};\n    color: #222;\n  }\n`;\n\nconst ColorsContainer = styled.div`\n  width: 20rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 0 auto 0.5rem;\n`;\n\nconst FormTask = forwardRef(\n  ({ handleChangeColor, handleSubmit, colorSelected }, ref) => (\n    <form onSubmit={handleSubmit}>\n      <Input name=\"title\" type=\"text\" ref={ref} />\n      <ColorsContainer>\n        {allColors.colors.map((color) => (\n          <ColorBox\n            color={color}\n            handleChangeColor={handleChangeColor}\n            isChecked={colorSelected === color}\n            key={id()}\n          />\n        ))}\n      </ColorsContainer>\n      <Button>Add Task</Button>\n    </form>\n  )\n);\n\nexport default FormTask;\n","import { keyframes } from \"styled-components\";\n\nexport const keyFrameTask = keyframes`\n  from {\n    transform: scale(0);\n  }\n  to {\n    transform:scale(1);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { keyFrameTask } from \"../styles/KeyFrames\";\n\nconst TaskContainer = styled.div`\n  display: grid;\n  grid-template-columns: 30px 1fr 50px;\n  align-items: center;\n  justify-items: start;\n  padding: 0 1rem;\n  background-color: ${({ color }) => color};\n  width: 100%;\n  max-width: 300px;\n  margin: 1rem auto;\n  border-radius: 5px;\n  animation: ${keyFrameTask} 0.7s ease;\n`;\n\nconst TaskButton = styled.button`\n  background-color: transparent;\n  border: 1px solid #fff;\n  color: #fff;\n  padding: 0.3rem 0.5rem;\n  border-radius: 10px;\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    background-color: #fff;\n    color: #222;\n  }\n`;\n\nconst TaskText = styled.p`\n  font-size: 0.8rem;\n  color: #fff;\n  text-decoration: ${({ done }) => (done ? \"line-through\" : \"none\")};\n`;\n\nconst Task = ({ title, color, done, handleCompleteTask, handleDeleteTask }) => (\n  <TaskContainer color={color}>\n    <input\n      type=\"checkbox\"\n      onChange={handleCompleteTask}\n      defaultChecked={done}\n    />\n    <TaskText done={done}>{title}</TaskText>\n    <TaskButton onClick={handleDeleteTask}>Delete</TaskButton>\n  </TaskContainer>\n);\n\nexport default Task;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport allColors from \"./styles/colors\";\nimport FormTask from \"./components/FormTask\";\nimport Task from \"./components/Task\";\nimport { generate as id } from \"shortid\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 18px;\n    background-color: #222;\n    color: ${allColors.mainColor};\n    text-align: center;\n    margin: 0;\n  }\n`;\n\nfunction App() {\n  const [colorSelected, setColorSelected] = useState(allColors.colors[0]);\n  const [tasks, setTasks] = useState([]);\n  const inputTitle = useRef(null);\n\n  const createNewTask = (title) => {\n    const newTask = {\n      id: id(),\n      title,\n      color: colorSelected,\n      done: false,\n    };\n\n    setTasks([...tasks, newTask]);\n  };\n\n  const getTask = (id) => {\n    const task = [...tasks].find((task) => task.id === id);\n    return task;\n  };\n\n  const handleCompleteTask = (id) => {\n    const currentTasks = [...tasks];\n    const task = getTask(id);\n    const index = currentTasks.indexOf(task);\n\n    currentTasks[index].done = !currentTasks[index].done;\n    setTasks(currentTasks);\n  };\n\n  const handleDeleteTask = (id) => {\n    let currentTasks = [...tasks];\n    currentTasks = currentTasks.filter((task) => task.id !== id);\n    setTasks(currentTasks);\n  };\n\n  const handleChangeColor = (color) => {\n    setColorSelected(color);\n  };\n\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    if (ev.target.title.value.trim() !== \"\") {\n      createNewTask(ev.target.title.value);\n      ev.target.title.value = \"\";\n    }\n  };\n\n  useEffect(() => {\n    inputTitle.current.focus();\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      <h1>To Do List</h1>\n      <FormTask\n        handleChangeColor={handleChangeColor}\n        handleSubmit={handleSubmit}\n        colorSelected={colorSelected}\n        ref={inputTitle}\n      />\n      {tasks.length === 0 && <p>Not tasks yet!</p>}\n      <div>\n        {tasks.map((task) => (\n          <Task\n            key={task.id}\n            done={task.done}\n            title={task.title}\n            color={task.color}\n            handleCompleteTask={() => handleCompleteTask(task.id)}\n            handleDeleteTask={() => handleDeleteTask(task.id)}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}